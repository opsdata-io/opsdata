{"version":3,"file":"static/js/822.d4c22a6e.chunk.js","mappings":"0KAIA,MA6CA,EA7CyBA,KACrB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IACjC,MAAEK,IAAUC,EAAAA,EAAAA,KAmBlB,OAjBAC,EAAAA,EAAAA,YAAU,KACaC,WACfJ,GAAW,GACX,IACI,MAAMK,QAAkBC,EAAAA,EAAAA,IAAcL,GACtCN,EAASU,EAAUE,MACnBT,EAAS,GACb,CAAE,MAAOD,GACLW,QAAQX,MAAM,wBAAyBA,GACvCC,EAAS,gDACb,CAAC,QACGE,GAAW,EACf,GAEJS,EAAY,GACb,CAACR,KAGAS,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACHZ,GACGa,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qBACHd,GACAe,EAAAA,EAAAA,KAAA,KAAAD,SAAId,KAEJe,EAAAA,EAAAA,KAAA,MAAAD,SACKjB,EAAMmB,KAAIC,IACPF,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,KAAGG,KAAMD,EAAKE,aAAcC,OAAO,SAASC,IAAI,sBAAqBP,SAChEG,EAAKK,YAFLL,EAAKM,UAQxB,ECzBd,EAjBqBC,KACjB,MAAOpB,EAAOqB,IAAY1B,EAAAA,EAAAA,UAAS,IAQnC,OANAO,EAAAA,EAAAA,YAAU,KAEN,MAAMoB,EAAWC,aAAaC,QAAQ,YACtCH,EAASC,EAAS,GACnB,KAGCb,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAACnB,EAAgB,CAACQ,MAAOA,MACvB,C,gHCZd,MAAMyB,EAAMC,IAAAA,OAAa,CACrBC,QAAS,SAIbF,EAAIG,aAAaC,QAAQC,KACrB3B,UACI,MAAMH,GAAQ+B,EAAAA,EAAAA,MAId,OAHI/B,IACAgC,EAAOC,QAAQC,cAAa,UAAAC,OAAanC,IAEtCgC,CAAM,IAEhBpC,GACUwC,QAAQC,OAAOzC,KAKvB,MAAM0C,EAASC,GACXd,EAAIe,KAAK,SAAUD,GAiBjBlC,EAAgBA,IAClBoB,EAAIgB,IAAI,UAGNC,EAAeA,IACjBjB,EAAIgB,IAAI,cAGNE,EAAkBC,GACpBnB,EAAIe,KAAK,aAAcI,GAWrBC,EAAaA,IACfpB,EAAIgB,IAAI,YAGNK,EAAkBxC,GACpBmB,EAAIe,KAAK,eAAgBlC,E","sources":["components/FileDownloadList.jsx","pages/DownloadPage.jsx","utils/api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { downloadFiles } from '../utils/api';\nimport { useAuth } from '../context/AuthContext'; // Import useAuth hook\n\nconst FileDownloadList = () => {\n    const [files, setFiles] = useState([]);\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n    const { token } = useAuth(); // Use token from AuthContext via useAuth hook\n\n    useEffect(() => {\n        const fetchFiles = async () => {\n            setLoading(true);\n            try {\n                const filesData = await downloadFiles(token); // Ensure downloadFiles uses the token properly\n                setFiles(filesData.data); // Assuming filesData comes in a data attribute\n                setError(''); // Clear previous errors\n            } catch (error) {\n                console.error('Error fetching files:', error);\n                setError('Failed to load files. Please try again later.');\n            } finally {\n                setLoading(false);\n            }\n        };\n        fetchFiles();\n    }, [token]);\n\n    return (\n        <div>\n            <h2>Files</h2>\n            {loading ? (\n                <p>Loading files...</p>\n            ) : error ? (\n                <p>{error}</p>\n            ) : (\n                <ul>\n                    {files.map(file => (\n                        <li key={file.id}>\n                            <a href={file.downloadLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                                {file.fileName}\n                            </a>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </div>\n    );\n};\n\nexport default FileDownloadList;\n","import React, { useState, useEffect } from 'react';\nimport FileDownloadList from '../components/FileDownloadList';\n\nconst DownloadPage = () => {\n    const [token, setToken] = useState('');\n\n    useEffect(() => {\n        // Get the token from local storage and set it to state\n        const jwtToken = localStorage.getItem('jwtToken'); // Use jwtToken for consistency\n        setToken(jwtToken);\n    }, []); // Empty dependency array means this runs once on mount\n\n    return (\n        <div>\n            <h1>Download Files</h1>\n            <FileDownloadList token={token} />\n        </div>\n    );\n};\n\nexport default DownloadPage;\n","import axios from 'axios';\nimport { getToken } from './jwt';  // Ensure this path is correct based on your project structure\n\n// Setup axios instance\nconst api = axios.create({\n    baseURL: '/api'\n});\n\n// Request interceptor to add the auth token for every request\napi.interceptors.request.use(\n    async (config) => {\n        const token = getToken();\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n// Simplified API functions\nexport const login = (credentials) => {\n    return api.post(`/login`, credentials);\n};\n\nexport const createUploadLink = () => {\n    return api.post(`/create-link`);\n};\n\nexport const uploadFile = (link, file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post(`/upload/${link}`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        }\n    });\n};\n\nexport const downloadFiles = () => {\n    return api.get(`/files`);\n};\n\nexport const getCustomers = () => {\n    return api.get(`/customers`);\n};\n\nexport const createCustomer = (customerData) => {\n    return api.post(`/customers`, customerData);\n};\n\nexport const updateCustomer = (customerId, customerData) => {\n    return api.put(`/customers/${customerId}`, customerData);\n};\n\nexport const deleteCustomer = (customerId) => {\n    return api.delete(`/customers/${customerId}`);\n};\n\nexport const getVersion = () => {\n    return api.get(`/version`);\n};\n\nexport const postUploadLink = (data) => {\n    return api.post(`/create-link`, data);\n};\n"],"names":["FileDownloadList","files","setFiles","useState","error","setError","loading","setLoading","token","useAuth","useEffect","async","filesData","downloadFiles","data","console","fetchFiles","_jsxs","children","_jsx","map","file","href","downloadLink","target","rel","fileName","id","DownloadPage","setToken","jwtToken","localStorage","getItem","api","axios","baseURL","interceptors","request","use","getToken","config","headers","Authorization","concat","Promise","reject","login","credentials","post","get","getCustomers","createCustomer","customerData","getVersion","postUploadLink"],"sourceRoot":""}