{"version":3,"file":"static/js/628.cd603a15.chunk.js","mappings":"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","sources":["components/CustomerDropdown.jsx","components/FileUploadForm.jsx","pages/UploadPage.jsx","utils/api.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { createCustomer, getCustomers } from '../utils/api';\nimport { getToken } from '../utils/jwt';\n\nconst CustomerDropdown = ({ value, onChange }) => {\n    const [customers, setCustomers] = useState([]);\n    const [newCustomerName, setNewCustomerName] = useState('');\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        const fetchCustomers = async () => {\n            const token = getToken();\n            try {\n                const fetchedCustomers = await getCustomers(token);\n                setCustomers(fetchedCustomers);\n            } catch (error) {\n                console.error('Error fetching customers:', error);\n                setError('Failed to fetch customers');\n            }\n        };\n\n        fetchCustomers();\n    }, []);\n\n    const handleCreateCustomer = async (e) => {\n        e.preventDefault();\n        const token = getToken();\n        try {\n            const newCustomer = await createCustomer({ name: newCustomerName }, token);\n            setCustomers([...customers, newCustomer]);  // Update the customer list locally\n            setNewCustomerName('');  // Clear input after successful creation\n            onChange(newCustomer.id);  // Optionally update the selected customer\n            setError('');  // Reset error message\n        } catch (error) {\n            console.error('Error creating customer:', error);\n            setError('Error creating customer. Please try again.');\n        }\n    };\n\n    return (\n        <div>\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n            <select value={value} onChange={(e) => onChange(e.target.value)}>\n                {customers.map(customer => (\n                    <option key={customer.id} value={customer.id}>\n                        {customer.name}\n                    </option>\n                ))}\n            </select>\n            <form onSubmit={handleCreateCustomer}>\n                <input\n                    type=\"text\"\n                    value={newCustomerName}\n                    onChange={(e) => setNewCustomerName(e.target.value)}\n                    placeholder=\"New Customer Name\"\n                />\n                <button type=\"submit\">Create Customer</button>\n            </form>\n        </div>\n    );\n};\n\nexport default CustomerDropdown;\n","import React, { useState } from 'react';\nimport { postUploadLink } from '../utils/api';\nimport { getToken } from '../utils/jwt'; // Import getToken to retrieve JWT token\nimport CustomerDropdown from './CustomerDropdown';\n\nconst FileUploadForm = () => {\n    const [customer, setCustomer] = useState('');\n    const [caseNumber, setCaseNumber] = useState('');\n    const [subject, setSubject] = useState('');\n    const [notes, setNotes] = useState('');\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setError('');\n        setSuccess('');\n        try {\n            const data = { customer, caseNumber, subject, notes };\n            const token = getToken(); // Retrieve the JWT token\n            const response = await postUploadLink(data, token);\n            console.log('Upload link created:', response);\n            setSuccess('Upload link created successfully.'); // Set success message\n            // Optionally reset the form here or navigate to confirmation page\n            setCustomer('');\n            setCaseNumber('');\n            setSubject('');\n            setNotes('');\n        } catch (error) {\n            console.error('Error creating upload link:', error);\n            setError('Failed to create upload link. Please try again.'); // Set error message\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label htmlFor=\"customer\">Customer:</label>\n            <CustomerDropdown value={customer} onChange={setCustomer} />\n            <br />\n            <label htmlFor=\"caseNumber\">Case Number:</label>\n            <input id=\"caseNumber\" type=\"text\" value={caseNumber} onChange={(e) => setCaseNumber(e.target.value)} required />\n            <br />\n            <label htmlFor=\"subject\">Subject:</label>\n            <input id=\"subject\" type=\"text\" value={subject} onChange={(e) => setSubject(e.target.value)} required />\n            <br />\n            <label htmlFor=\"notes\">Notes:</label>\n            <textarea id=\"notes\" value={notes} onChange={(e) => setNotes(e.target.value)} required />\n            <br />\n            <button type=\"submit\">Create Upload Link</button>\n            {error && <div style={{ color: 'red' }}>{error}</div>}\n            {success && <div style={{ color: 'green' }}>{success}</div>}\n        </form>\n    );\n};\n\nexport default FileUploadForm;\n","import React from 'react';\nimport { useParams } from 'react-router-dom'; // Import useParams for route parameters\nimport FileUploadForm from '../components/FileUploadForm';\nimport { getToken } from '../utils/jwt';\n\nconst UploadPage = () => {\n    const { link } = useParams(); // Use useParams to access route parameters\n    const token = getToken(); // Retrieve the JWT token\n\n    return (\n        <div>\n            <h1>Upload your file</h1>\n            <FileUploadForm link={link} token={token} />\n        </div>\n    );\n};\n\nexport default UploadPage;\n","import axios from 'axios';\nimport { getToken } from './jwt';  // Ensure this path is correct based on your project structure\n\n// Setup axios instance\nconst api = axios.create({\n    baseURL: '/api'\n});\n\n// Request interceptor to add the auth token for every request\napi.interceptors.request.use(\n    async (config) => {\n        const token = getToken();\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n// Simplified API functions\nexport const login = (credentials) => {\n    return api.post(`/login`, credentials);\n};\n\nexport const createUploadLink = () => {\n    return api.post(`/create-link`);\n};\n\nexport const uploadFile = (link, file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post(`/upload/${link}`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        }\n    });\n};\n\nexport const downloadFiles = () => {\n    return api.get(`/files`);\n};\n\nexport const getCustomers = () => {\n    return api.get(`/customers`);\n};\n\nexport const createCustomer = (customerData) => {\n    return api.post(`/customers`, customerData);\n};\n\nexport const updateCustomer = (customerId, customerData) => {\n    return api.put(`/customers/${customerId}`, customerData);\n};\n\nexport const deleteCustomer = (customerId) => {\n    return api.delete(`/customers/${customerId}`);\n};\n\nexport const getVersion = () => {\n    return api.get(`/version`);\n};\n\nexport const postUploadLink = (data) => {\n    return api.post(`/create-link`, data);\n};\n"],"names":["_ref","value","onChange","customers","setCustomers","useState","newCustomerName","setNewCustomerName","error","setError","useEffect","async","token","getToken","fetchedCustomers","getCustomers","console","fetchCustomers","_jsxs","children","_jsx","style","color","e","target","map","customer","id","name","onSubmit","preventDefault","newCustomer","createCustomer","type","placeholder","FileUploadForm","setCustomer","caseNumber","setCaseNumber","subject","setSubject","notes","setNotes","success","setSuccess","data","response","postUploadLink","log","htmlFor","CustomerDropdown","required","UploadPage","link","useParams","api","axios","baseURL","interceptors","request","use","config","headers","Authorization","concat","Promise","reject","login","credentials","post","downloadFiles","get","customerData","getVersion"],"sourceRoot":""}