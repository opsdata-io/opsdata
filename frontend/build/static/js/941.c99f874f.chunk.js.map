{"version":3,"file":"static/js/941.c99f874f.chunk.js","mappings":"0KAIA,MA0CA,EA1CkBA,IAAgB,IAAf,MAAEC,GAAOD,EACxB,MAAOE,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,OAC5BG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,GAEjCK,EAAWR,IAASS,EAAAA,EAAAA,MAsB1B,OApBAC,EAAAA,EAAAA,YAAU,KACeC,WACjB,IACI,MAAMC,QAAiBC,EAAAA,EAAAA,IAAWL,GAClC,IAAII,EAASE,GAKT,MAAM,IAAIC,MAAM,uCALH,CACb,MAAMC,QAAaJ,EAASK,OAC5Bf,EAAec,EAAKE,SACpBb,EAAS,KACb,CAGJ,CAAE,MAAOD,GACLe,QAAQf,MAAM,0BAA2BA,GACzCC,EAAS,uCACb,CACAE,GAAW,EAAM,EAErBa,EAAc,GACf,CAACZ,IAEAF,GACOe,EAAAA,EAAAA,KAAA,KAAAC,SAAG,gBAIVC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,cACHlB,GAAQiB,EAAAA,EAAAA,KAAA,KAAAC,SAAIlB,KACTiB,EAAAA,EAAAA,KAAA,OAAKG,MAAO,CAAEC,SAAU,WAAYC,OAAQ,GAAIC,KAAM,IAAKL,SACtDrB,GAAe,wCAEtB,C,gHCtCd,MAAM2B,EAAMC,IAAAA,OAAa,CACrBC,QAAS,SAIbF,EAAIG,aAAaC,QAAQC,KACrBtB,UACI,MAAMX,GAAQS,EAAAA,EAAAA,MAId,OAHIT,IACAkC,EAAOC,QAAQC,cAAa,UAAAC,OAAarC,IAEtCkC,CAAM,IAEhB9B,GACUkC,QAAQC,OAAOnC,KAKvB,MAAMoC,EAASC,GACXb,EAAIc,KAAK,SAAUD,GAiBjBE,EAAgBA,IAClBf,EAAIgB,IAAI,UAGNC,EAAeA,IACjBjB,EAAIgB,IAAI,cAGNE,EAAkBC,GACpBnB,EAAIc,KAAK,aAAcK,GAWrBlC,EAAaA,IACfe,EAAIgB,IAAI,YAGNI,EAAkBhC,GACpBY,EAAIc,KAAK,eAAgB1B,E","sources":["pages/Dashboard.jsx","utils/api.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getVersion } from '../utils/api';\nimport { getToken } from '../utils/jwt';\n\nconst Dashboard = ({ token }) => {\n    const [versionInfo, setVersionInfo] = useState('');\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    const jwtToken = token || getToken();\n\n    useEffect(() => {\n        const fetchVersion = async () => {\n            try {\n                const response = await getVersion(jwtToken);\n                if (response.ok) {\n                    const data = await response.json();\n                    setVersionInfo(data.version);\n                    setError(null);\n                } else {\n                    throw new Error('Failed to fetch version information');\n                }\n            } catch (error) {\n                console.error('Error fetching version:', error);\n                setError('Unable to fetch version information.');\n            }\n            setLoading(false);\n        };\n        fetchVersion();\n    }, [jwtToken]);\n\n    if (loading) {\n        return <p>Loading...</p>;\n    }\n\n    return (\n        <div>\n            <h1>Dashboard</h1>\n            {error ? <p>{error}</p> :\n                <div style={{ position: 'absolute', bottom: 10, left: 10 }}>\n                    {versionInfo || 'Version information not available'}\n                </div>}\n        </div>\n    );\n};\n\nexport default Dashboard;\n","import axios from 'axios';\nimport { getToken } from './jwt';  // Ensure this path is correct based on your project structure\n\n// Setup axios instance\nconst api = axios.create({\n    baseURL: '/api'\n});\n\n// Request interceptor to add the auth token for every request\napi.interceptors.request.use(\n    async (config) => {\n        const token = getToken();\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n// Simplified API functions\nexport const login = (credentials) => {\n    return api.post(`/login`, credentials);\n};\n\nexport const createUploadLink = () => {\n    return api.post(`/create-link`);\n};\n\nexport const uploadFile = (link, file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post(`/upload/${link}`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        }\n    });\n};\n\nexport const downloadFiles = () => {\n    return api.get(`/files`);\n};\n\nexport const getCustomers = () => {\n    return api.get(`/customers`);\n};\n\nexport const createCustomer = (customerData) => {\n    return api.post(`/customers`, customerData);\n};\n\nexport const updateCustomer = (customerId, customerData) => {\n    return api.put(`/customers/${customerId}`, customerData);\n};\n\nexport const deleteCustomer = (customerId) => {\n    return api.delete(`/customers/${customerId}`);\n};\n\nexport const getVersion = () => {\n    return api.get(`/version`);\n};\n\nexport const postUploadLink = (data) => {\n    return api.post(`/create-link`, data);\n};\n"],"names":["_ref","token","versionInfo","setVersionInfo","useState","error","setError","loading","setLoading","jwtToken","getToken","useEffect","async","response","getVersion","ok","Error","data","json","version","console","fetchVersion","_jsx","children","_jsxs","style","position","bottom","left","api","axios","baseURL","interceptors","request","use","config","headers","Authorization","concat","Promise","reject","login","credentials","post","downloadFiles","get","getCustomers","createCustomer","customerData","postUploadLink"],"sourceRoot":""}