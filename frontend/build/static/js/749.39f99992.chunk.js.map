{"version":3,"file":"static/js/749.39f99992.chunk.js","mappings":"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","sources":["pages/AddCustomerPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Replace useHistory with useNavigate\nimport { getToken } from '../utils/jwt'; // Import getToken from jwt utility\n\nconst AddCustomerPage = ({ token }) => {\n    const navigate = useNavigate(); // useNavigate hook for navigation\n    const [customerData, setCustomerData] = useState({\n        companyName: '',\n        address: '',\n        notes: '',\n        subscriptionStatus: '',\n    });\n    const [error, setError] = useState(null); // State to hold error messages\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setCustomerData({ ...customerData, [name]: value });\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const jwtToken = token || getToken(); // Retrieve the JWT token using the utility function\n        try {\n            const response = await fetch(`/api/customers`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${jwtToken}`,\n                },\n                body: JSON.stringify(customerData),\n            });\n            if (response.ok) {\n                const newCustomer = await response.json();\n                console.log('New customer:', newCustomer); // Handle success as needed\n                // Redirect to CustomerDetailsPage for the new customer\n                navigate(`/customer/${newCustomer.id}`); // Use navigate for redirection\n            } else {\n                // Handle error response\n                const errorResponse = await response.json();\n                setError(errorResponse.error); // Set error state with error message\n            }\n        } catch (error) {\n            console.error('Error creating customer:', error); // Log any unexpected errors\n            setError('Failed to create customer. Please try again.'); // Generic error message\n        }\n    };\n\n    return (\n        <div>\n            <h2>Customer Management</h2>\n            <h3>Add Customer</h3>\n            {error && <div style={{ color: 'red' }}>{error}</div>} {/* Display error message */}\n            <form onSubmit={handleSubmit}>\n                <table style={{ width: '100%' }}>\n                    <tbody>\n                        <tr>\n                            <td style={{ textAlign: 'right', paddingRight: '1rem' }}>\n                                <label>Company Name:</label>\n                            </td>\n                            <td>\n                                <input type=\"text\" name=\"companyName\" value={customerData.companyName} onChange={handleChange} required />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style={{ textAlign: 'right', paddingRight: '1rem' }}>\n                                <label>Address:</label>\n                            </td>\n                            <td>\n                                <input type=\"text\" name=\"address\" value={customerData.address} onChange={handleChange} required />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style={{ textAlign: 'right', paddingRight: '1rem' }}>\n                                <label>Subscription Status:</label>\n                            </td>\n                            <td>\n                                <input type=\"text\" name=\"subscriptionStatus\" value={customerData.subscriptionStatus} onChange={handleChange} required />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style={{ textAlign: 'center', paddingRight: '1rem' }} colSpan={2}>\n                                <label>Notes:</label>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style={{ textAlign: 'center', paddingRight: '1rem' }} colSpan={2}>\n                                <textarea name=\"notes\" value={customerData.notes} onChange={handleChange} rows=\"4\"></textarea>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <button type=\"submit\" style={{ marginTop: '1rem' }}>Submit</button>\n            </form>\n        </div>\n    );\n};\n\nexport default AddCustomerPage;\n"],"names":["_ref","token","navigate","useNavigate","customerData","setCustomerData","useState","companyName","address","notes","subscriptionStatus","error","setError","handleChange","e","name","value","target","_jsxs","children","_jsx","style","color","onSubmit","async","preventDefault","jwtToken","getToken","response","fetch","method","headers","Authorization","concat","body","JSON","stringify","ok","newCustomer","json","console","log","id","errorResponse","width","textAlign","paddingRight","type","onChange","required","colSpan","rows","marginTop"],"sourceRoot":""}